import { to_sexp_f, int, str, Tuple, Optional, Bytes, SExp } from "clvm";
export declare type Token = Tuple<str, int>;
export declare function consume_whitespace(s: str, offset: int): int;
export declare function consume_until_whitespace(s: str, offset: int): Token;
export declare function next_cons_token(stream: Generator<Token>): Token;
export declare function tokenize_cons(token: str, offset: int, stream: Generator<Token>): SExp;
export declare function tokenize_int(token: str, offset: int): Optional<SExp>;
export declare function tokenize_hex(token: str, offset: int): Optional<SExp>;
export declare function tokenize_quotes(token: str, offset: int): Tuple<Tuple<number, number>, Bytes> | null;
export declare function tokenize_symbol(token: str, offset: int): Tuple<Tuple<number, number>, Bytes>;
export declare function tokenize_sexp(token: str, offset: int, stream: Generator<Token>): SExp | Tuple<Tuple<number, number>, Bytes> | null;
export declare function token_stream(s: str): Generator<Token>;
export declare function read_ir(s: str, to_sexp?: typeof to_sexp_f): SExp;
