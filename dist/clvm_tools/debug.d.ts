import { int, Optional, SExp, str } from "clvm";
import { disassemble } from "./binutils";
import { TRunProgram } from "../stages/stage_0";
export declare type OpCallable = (v1: any, v2: ValStackType) => int;
export declare type ValStackType = SExp[];
export declare type OpStackType = OpCallable[];
export declare const PRELUDE = "<html>\n<head>\n  <link rel=\"stylesheet\"\n      href=\"https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css\"\n      integrity=\"sha384-ggOyR0iXCbMQv3Xipma34MD+dH/1fQ784/j6cY/iJTQUOhcWr7x9JvoRxT2MZw1T\"\n      crossorigin=\"anonymous\">\n  <script\n      src=\"https://code.jquery.com/jquery-3.3.1.slim.min.js\"\n      integrity=\"sha384-q8i/X+965DzO0rT7abK41JStQIAqVgRVzpbzo5smXKp4YfRvH+8abtTE1Pi6jizo\"\n      crossorigin=\"anonymous\"></script>\n  <script\n      src=\"https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.7/umd/popper.min.js\"\n      integrity=\"sha384-UO2eT0CpHqdSJQ6hJty5KVphtPhzWj9WO1clHTMGa3JDZwrnQq4sF86dIHNDz0W1\"\n      crossorigin=\"anonymous\"></script>\n  <script\n      src=\"https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/js/bootstrap.min.js\"\n      integrity=\"sha384-JjSmVgyd0p3pXB1rRibZUAYoIIy6OrQ6VrjIEaFf/nJGzIxFDsf4x0xIM+B07jRM\"\n      crossorigin=\"anonymous\"></script>\n</head>\n<body>\n<div class=\"container\">\n";
export declare const TRAILER = "</div></body></html>";
export declare function dump_sexp(s: SExp, disassemble_f?: typeof disassemble): string;
export declare function build_symbol_dump(constants_lookup: Record<str, SExp>, run_program: TRunProgram, path: str): void;
export declare function text_trace(disassemble_f: typeof disassemble, form: SExp, symbol: Optional<str>, env: SExp, result: str): void;
export declare function table_trace(disassemble_f: typeof disassemble, form: SExp, symbol: Optional<str>, env: SExp, result: str): void;
export declare function display_trace(trace: Array<[SExp, SExp, Optional<SExp>]>, disassemble_f: typeof disassemble, symbol_table: Optional<Record<str, str>>, display_fun: typeof text_trace): void;
export declare function trace_to_text(trace: Array<[SExp, SExp, Optional<SExp>]>, disassemble_f: typeof disassemble, symbol_table: Record<str, str>): void;
export declare function trace_to_table(trace: Array<[SExp, SExp, Optional<SExp>]>, disassemble_f: typeof disassemble, symbol_table: Optional<Record<str, str>>): void;
export declare function make_trace_pre_eval(log_entries: Array<[SExp, SExp, Optional<SExp>]>, symbol_table?: Optional<Record<str, str>>): (sexp: SExp, args: SExp) => ((r: SExp) => void) | null;
