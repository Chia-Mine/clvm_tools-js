import { SExp, CastableType, int, Bytes, bool, str, Tuple, Optional, None } from "clvm";
export declare function ir_new(type: SExp | int | Tuple<any, any> | None, val: CastableType, offset?: int): SExp;
export declare function ir_cons(first: SExp | Tuple<any, any> | None, rest: SExp | Tuple<any, any> | None, offset?: int): SExp;
export declare function ir_list(...items: SExp[]): SExp;
export declare function ir_null(): SExp;
export declare function ir_type(ir_sexp: SExp): int;
export declare function ir_as_int(ir_sexp: SExp): int;
export declare function ir_offset(ir_sexp: SExp): int;
export declare function ir_val(ir_sexp: SExp): SExp;
export declare function ir_nullp(ir_sexp: SExp): bool;
export declare function ir_listp(ir_sexp: SExp): bool;
export declare function ir_as_sexp(ir_sexp: SExp): SExp | [];
export declare function ir_is_atom(ir_sexp: SExp): bool;
export declare function ir_as_atom(ir_sexp: SExp): Bytes;
export declare function ir_first(ir_sexp: SExp): SExp;
export declare function ir_rest(ir_sexp: SExp): SExp;
export declare function ir_symbol(symbol: str): Tuple<int, Bytes>;
export declare function ir_as_symbol(ir_sexp: SExp): Optional<str>;
export declare function ir_iter(ir_sexp: SExp): Generator<SExp, void, unknown>;
export declare function is_ir(sexp: SExp): bool;
